grid.arrange(contribution, contribution_strict_small_d, contribution_strict_big_d)
contribution
contribution_strict_small_d
contribution_strict_big_d
contribution_strict_small_d <- plot_contribution(fit_res_strict_small_d$contribution,
cancer_signatures,
coord_flip = TRUE,  mode= "relative")
contribution_strict_big_d <- plot_contribution(fit_res_strict_big_d$contribution,
cancer_signatures, coord_flip = FALSE,
mode = "relative")
contribution
contribution_strict_small_d
contribution_strict_big_d
contribution_strict_small_d <- plot_contribution(fit_res_strict_small_d$contribution,
cancer_signatures,
coord_flip = TRUE,  mode= "relative")
contribution_strict_big_d <- plot_contribution(fit_res_strict_big_d$contribution,
cancer_signatures, coord_flip = TRUE,
mode = "relative")
contribution
contribution_strict_small_d
contribution_strict_big_d
contribution <- plot_contribution(fit_res$contribution, cancer_signatures,
coord_flip = TRUE, mode = "relative")
contribution
contribution
contribution_strict_small_d
contribution_strict_big_d
reconstruction
reconstruction_strict_small_d
reconstruction_strict_big_d)
reconstruction
reconstruction_strict_small_d
reconstruction_strict_big_d
vcf_files <- list.files(path, pattern="*_3000.vcf")
samples_names_all <- c("LUAD","SKCM")
vcfs_all <- read_vcfs_as_granges(vcf_files, samples_names_all, ref_genome,  type = "all")
vcf_files <- list.files(path, pattern="*_3000.vcf")
samples_names_all <- c("LUAD","SKCM")
vcfs_all <- read_vcfs_as_granges(paste0(path, vcf_files), samples_names_all, ref_genome,  type = "all")
mut_mat_s <- mut_matrix_stranded(vcfs_all, ref_genome, genes_hg19)
strand_counts <- strand_occurrences(mut_mat_s, by=samples_names_all)
head(strand_counts)
strand_bias <- strand_bias_test(strand_counts)
strand_bias
ps1 <- plot_strand(strand_counts, mode = "relative")
ps1
ps2 <- plot_strand_bias(strand_bias)
ps2
?read.delim
library(data.table)
data1 <- data.table(ID1 = 1001:1006,    # Create first data.table
x1 = 1:6,
x2 = letters[1:6])
data2 <- data.table(ID2 = 1001:1007,    # Create second data.table
y1 = 7:1,
y2 = letters[7:1])
data1
data2
merge.data.table(data1,     # Merge data.tables
data2,
by.x = "ID1",
by.y = "ID2")
merge.data.table(data1,     # Merge data.tables
data2,
by.x = "ID1",
by.y = "ID2",)
merge.data.table(data1,     # Merge data.tables
data2,
by.x = "ID1",
by.y = "ID2",all=TRUE)
merge(data1,     # Merge data.tables
data2,
by.x = "ID1",
by.y = "ID2",all=TRUE)
count_table <- data.table()
merge.data.table(count_table,     # Merge data.tables
data2,
by.x = "ID1",
by.y = "ID2",all=TRUE)
merge.data.table(count_table,     # Merge data.tables
data2,
by.y = "ID2",all=TRUE)
count_table <- data.table(1)
merge.data.table(count_table,     # Merge data.tables
data2,
by.y = "ID2",all=TRUE)
count_table <- data.table(1)
count_table
setnames(count_table, 'V1', 'smthing')
count_table
count_table <- data.table(cdr3aa=0)
count_table
count_table <- data.table(cdr3aa=NA)
setnafill(count_table, fill = 0)
count_table
setnafill(count_table, fill = 0)
load_all()
library(devtools)
load_all()
devtools::check()
devtools::check()
document()
devtools::check()
load_all()
devtools::check()
?as.formula
as.formula('~ 0 + x')
combn
combn(c(1,-1,0,0,0), 5)
permn(c(1,-1,0,0,0))
library(combinat)
install.packages(library(combinat))
install.packages(combinat)
install.packages('combinat')
diag(4)
matrix(0)
matrix(ncols=0, nrows=0)
?matrix
matrix(1, nrows=3, ncols=1)
matrix(1, nrow=3, ncol=1)
matrix(0, nrow=0, ncol=0)
matrix(0, nrow=0, ncol=0)
?cbind
matrix(0, nrow=0, ncol=4)
matrix(0, nrow=2, ncol=0)
cbind(matrix(0, nrow=2, ncol=0), matrix(1, nrow=2, ncol=3)
)
mat <- cbind(matrix(0, nrow=2, ncol=0), matrix(1, nrow=2, ncol=3))
mat[1,]
typeof(mat[1,])
library(edgeR)
?estimateDisp
?calcNormFactors
?glmQLFTest
?topTags
document()
document()
document()
rlang::last_error()
rlang::last_trace()
rlang::last_trace()
document()
document()
document()
document()
document()
document()
load_all()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
document()
devtools::check()
document()
load_all()
devtools::check()
?lcomp
document()
document()
load_all()
devtools::check()
usethis::use_testthat(3)
new_tcrgrapher <- function(clonoset, metadata){
checkDT(clonoset, c('Read.count', 'cdr3aa', 'cdr3nt', 'bestVGene', 'bestJGene'))
checkDT(metadata, c('sample'))
structure(clonoset,
class = 'tcrgrapher',
metadata = metadata)
}
clonoset <- data.frame(Read.count = c(5,4,3), cdr3aa = c('CASSYQTGAAYGYTF', 'CASSPEETQYF', 'CASSLGQAYEQYF'), cdr3nt = c('tgcgcgagcagctatcagaccggcgcggcgtatggctataccttt', 'tgcgcgagcagcccggaagaaacccagtatttt', 'tgcgcgagcagcctgggccaggcgtatgaacagtatttt'), bestVGene = c('TRBV6-5', 'TRBV7-2', 'TRBV7-8'), 'bestJGene' = c('TRBJ1-2', 'TRBJ2-5', 'TRBJ2-7'))
clonoset <- setDT(clonoset)
library(data.table)
clonoset <- setDT(clonoset)
metadata <- data.frame(sample = c('example1'))
metadata <- setDT(metadata)
new_tcrgrapher(clonoset, metadata)
typeof(clonoset)
library(sloop)
install.packages('sloop')
library(sloop)
attributes(clonoset)
?stopifnot
attributes)1:@
attributes(1:2)
attributes(clonoset)$names
attributes(clonoset)$names == c('Read.count', 'cdr3aa', 'cdr3nt', 'bestVGene', 'bestJGene')
attributes(clonoset)$names %in% c('Read.count', 'cdr3aa', 'cdr3nt', 'bestVGene', 'bestJGene')
?is.null
?stopifnot
stopifnot(c(TRUE, FALSE))
stopifnot(c(TRUE, TRUE))
attributes(clonoset)$class
new_tcrgrapher <- function(clonoset, metadata){
stopifnot(!is.null(typeof(clonoset)),
attributes(clonoset)$names %in% c('Read.count', 'cdr3aa', 'cdr3nt', 'bestVGene', 'bestJGene'),
"data.table" %in% attributes(clonoset)$class)
stopifnot(!is.null(typeof(metadata)),
attributes(metadata)$names %in% c('sample'),
"data.table" %in% attributes(metadata)$class)
structure(clonoset,
class = 'tcrgrapher',
metadata = metadata)
}
new_tcrgrapher(clonoset, metadata)
my_first_tcrgrapher <- new_tcrgrapher(clonoset, metadata)
View(my_first_tcrgrapher)
my_first_tcrgrapher
my_first_tcrgrapher$metadata
attributes(my_first_tcrgrapher)
my_first_tcrgrapher <- new_tcrgrapher(clonoset, metadata)
View(my_first_tcrgrapher)
my_first_tcrgrapher
setClass('TCRgrapher',
slots = c(
clonoset = 'list',
metadata = 'list'
)
)
ny_S4 <- new('TCRgrapher', clonoset, metadata)
setClass('TCRgrapher',
slots = list(
clonoset = 'data.table',
metadata = 'data.table'
)
)
ny_S4 <- new('TCRgrapher', clonoset, metadata)
setClass('Something', representation(x='character', dt='data.table'))
x <- new("Something", x='check', dt=data.table(a=1:10, b=11:20))
x
x@dt
setClass('TCRgrapher',
representation(clonoset = 'data.table', metadata = 'data.table')
)
ny_S4 <- new('TCRgrapher', clonoset, metadata)
ny_S4 <- new('TCRgrapher', clonoset=clonoset, metadata=metadata)
ny_S4
ny_S4@clonoset
setClass('TCRgrapher',
slots = c(
clonoset = 'data.table',
metadata = 'data.table'
),
prototype = c(
clonoset = data.table(Read.count = numeric(), cdr3aa = character(),
cdr3nt = character(), bestVGene = character(),
bestJGene = character()),
metadata = data.table(sample = 'sample_1')
)
)
setClass('TCRgrapher',
slots = c(
clonoset = 'data.table',
metadata = 'data.table'
),
prototype = c(
clonoset = data.table('Read.count' = numeric(), 'cdr3aa' = character(),
'cdr3nt' = character(), 'bestVGene' = character(),
'bestJGene' = character()),
metadata = data.table(sample = 'sample_1')
)
)
ny_S4@clonoset
ny_S4
setClass('TCRgrapher',
slots = c(
clonoset = 'data.table',
metadata = 'data.table'
),
prototype = c(
clonoset = data.table('Read.count' = numeric(), 'cdr3aa' = character(),
'cdr3nt' = character(), 'bestVGene' = character(),
'bestJGene' = character()),
metadata = data.table(sample = 'sample_1')
)
)
setClass('TCRgrapher',
contains = 'data.table',
slots = c(
clonoset = 'data.table',
metadata = 'data.table'
),
prototype = c(
clonoset = data.table('Read.count' = numeric(), 'cdr3aa' = character(),
'cdr3nt' = character(), 'bestVGene' = character(),
'bestJGene' = character()),
metadata = data.table(sample = 'sample_1')
)
)
?setClass
representation
library(data.table)
', 'CMYCDRF'),
v_gene = c('TRB9', 'TRB69', 'TRB666'))
DT <- data.table(ind = 1:3, cdr3aa = c('CASSF', 'CSMTHF', 'CMYCDRF'),
v_gene = c('TRB9', 'TRB69', 'TRB666'))
DT
all_other_variants_one_mismatch_regexp <- function(str) {
# All one mismatch variants with X (regexp!)
unique(as.vector(sapply(
2:(nchar(str) - 1),
function(x) {
tmp <- str
substr(tmp, x, x) <- "X"
tmp
}
)))
}
DT[,cr3aa=all_other_variants_one_mismatch_regexp(cdr3aa),ind]
DT[,cr3aa := all_other_variants_one_mismatch_regexp(cdr3aa),by=ind]
all_other_variants_one_mismatch_regexp(DT$cdr3aa)
DT[,.(ind,cr3aa = all_other_variants_one_mismatch_regexp(cdr3aa)),]
DT[,.(v_gene,cr3aa = all_other_variants_one_mismatch_regexp(cdr3aa)),]
DT[,.(v_gene,ind,cr3aa = all_other_variants_one_mismatch_regexp(cdr3aa)),]
DT[,.(cr3aa = all_other_variants_one_mismatch_regexp(cdr3aa), v_gene,ind,),]
DT[,.(cr3aa = all_other_variants_one_mismatch_regexp(cdr3aa)),]
DT[,.(cr3aa = all_other_variants_one_mismatch_regexp(cdr3aa), ind),]
?substr
2:(nchar('str'CASSMYCDRF) - 1)
2:(nchar('CASSMYCDRF') - 1)
all_other_variants_one_mismatch_regexp('CASSMYCDRF')
all_other_variants_one_mismatch_regexp(c('CASSMYCDRF','smsms'))
DT <- data.table(ind = 1:3, cdr3aa = c('CASSF', 'CSMTHF', 'CMYCDRF'),
v_gene = c('TRB9', 'TRB69', 'TRB666'))
all_other_variants_one_mismatch_regexp <- function(str) {
# All one mismatch variants with X (regexp!)
unique(as.vector(sapply(
2:(nchar(str) - 1),
function(x) {
tmp <- str
substr(tmp, x, x) <- "X"
tmp
}
)))
}
DT[,.(cr3aa = all_other_variants_one_mismatch_regexp(cdr3aa), ind),]
DT[,.(cr3aa = all_other_variants_one_mismatch_regexp(cdr3aa)),]
DT[,.(cr3aa = all_other_variants_one_mismatch_regexp(cdr3aa)),ind]
DT <- data.table(ind = 1:3, cdr3aa = c('CASSF', 'CSMTHF', 'CMYCDRF'),
v_gene = c('TRB9', 'TRB69', 'TRB666'))
all_other_variants_one_mismatch_regexp <- function(str) {
# All one mismatch variants with X (regexp!)
unique(as.vector(sapply(
2:(nchar(str) - 1),
function(x) {
tmp <- str
substr(tmp, x, x) <- "X"
tmp
}
)))
}
DT[,.(cr3aa = all_other_variants_one_mismatch_regexp(cdr3aa)),ind]
DT[,.(cr3aa = all_other_variants_one_mismatch_regexp(cdr3aa), v_gene),ind]
DT[,ind := 1:.N,]
DT
DT <- data.table(ind = 1:3, cdr3aa = c('CASSF', 'CSMTHF', 'CMYCDRF'),
v_gene = c('TRB9', 'TRB69', 'TRB666'))
DT[,ind := 1:.N]
DT
DT[,.(cdr3aa, v_gene, ind)]
library(ggplot2)
library(grid)
library(ggpattern)
library(stringr)
library(patchwork)
library(scales)
library(ggplot2)
library(grid)
library(ggpattern)
library(stringr)
library(patchwork)
library(scales)
timeline_data <- data.frame(date=c('1993-01-01', '1994-08-01', '1999-01-01', '2009-06-01',                                    '2016-09-01', '2019-03-28'),
event_type=c('disease', 'disease', 'disease',
'transplantation', 'disease', 'antibody'),
milestones=c('First\nsymptoms', 'Establishing\ndiagnosis',
'HLA-B27\npositive test',
'Stem cell\ntransplantation',
'Total arthroplasty\nof the left hip joint',
'Start of BCD-180\ntreatment'),
position=c(2.2,.85,.85,.85,.85,2.2),
text_x_position=as.Date(c('1994-03-01', '1996-04-01',
'1999-01-01','2009-06-01',
'2014-04-01', '2017-02-28')),
text_y_position=c(1,.3,.85,.85,.3,1))
timeline_data$position <- timeline_data$position/2 + 0.4
timeline_data$date <- as.Date(timeline_data$date)
timeline_data$event_type <- as.factor(timeline_data$event_type)
years <- data.frame(x=as.Date(c('1993-01-01', '1994-08-01', '1999-01-01', '2009-06-01', '2016-09-01', '2019-03-28', '2020-03-28', '2021-01-28', '2022-01-28')),
y=rep(0.25, 9), label=c('1983', '1986', '1999', '2009', '2016', '2019',
'2020', '2021', '2022'))
treatment_data <- data.frame(medicine=c('NSAID', 'anti-TNF', 'BCD-180'),
position=c(-0.2, -0.5, -0.8))
antibody_data <- data.frame(date=as.Date(c('2019-03-28', '2019-07-04', '2020-05-22',
'2020-11-11', '2021-02-10', '2021-05-24', '2021-11-24',
'2022-03-04')),
milestones=c('60 mg', '120 mg', '160 mg',
'250 mg', '250 mg', '500 mg', '250 mg', '500 mg'))
NSAID_data <- data.frame(date=as.Date(c('2006-01-01', '2007-01-01', '2008-01-01',
'2009-01-01','2012-01-01', '2013-01-01',
'2014-01-01','2015-01-01','2016-01-01',
'2017-01-01','2018-01-01','2019-01-01')))
humira_data <- data.frame(date=as.Date('2020-05-01'))
timeline_plot <- ggplot(timeline_data, aes(x=date, y=position)) +
geom_hline(yintercept=0, color = "black", size=0.3) +
theme_classic() +
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position='none') +
# голубые и розовые полоски
geom_rect_pattern(aes(xmin=as.Date('1993-01-01'), ymin=0.02, xmax=as.Date('2009-06-01'), ymax=0.2),
pattern = 'stripe', pattern_colour = 'white', fill = 'white', pattern_fill='palevioletred2', pattern_spacing=0.01, pattern_density=0.5, pattern_alpha=0.5) +
geom_rect_pattern(aes(xmin=as.Date('2009-06-01'), ymin=0.02, xmax=as.Date('2011-04-01'), ymax=0.2),
pattern = 'stripe', pattern_colour = 'white', fill = 'white', pattern_fill='skyblue3', pattern_spacing=0.01, pattern_density=0.5, pattern_alpha=0.5) +
geom_rect_pattern(aes(xmin=as.Date('2011-04-01'), ymin=0.02, xmax=as.Date('2019-03-28'), ymax=0.2),
pattern = 'stripe', pattern_colour = 'white', fill = 'white', pattern_fill='palevioletred2', pattern_spacing=0.01, pattern_density=0.5, pattern_alpha=0.5) +
geom_rect_pattern(aes(xmin=as.Date('2019-03-28'), ymin=0.02, xmax=as.Date('2022-03-04'), ymax=0.2),
pattern = 'stripe', pattern_colour = 'white', fill = 'white', pattern_fill='olivedrab3', pattern_spacing=0.01, pattern_density=0.5, pattern_alpha=0.5) +
geom_segment(data=timeline_data, aes(y=timeline_data$position, yend=0, xend=timeline_data$date),
color='black', size=0.2, arrow=arrow(type='closed', length=unit(0.05, 'inches'))) +
geom_text(data=timeline_data, aes(y=text_y_position,
x=text_x_position,
label=timeline_data$milestones,
colour=event_type), size=3, vjust=-0.5, hjust=0.5) +
scale_colour_manual(values=c('#7ba428', '#BE607F', '#5684a4')) +
geom_point(aes(colour=event_type)) +
geom_text(data=years, aes(x=x, y=y, label=label),size=3,vjust=-0.5,hjust=0, color='black',
angle=90, fontface='bold') +
#indometacin
geom_hline(linetype='dotted', yintercept=-0.2, color = "grey", size=0.3) +
geom_rect(xmin=as.Date('1993-01-01'), xmax=as.Date('2005-01-01'), ymin=-0.1, ymax=-0.3, alpha=0.1,
fill='#f9d62e') +
geom_rect(xmin=as.Date('1995-01-01'), xmax=as.Date('2005-01-01'), ymin=-0.1, ymax=-0.3, alpha=0.1,
fill='#f9d62e') +
geom_rect(xmin=as.Date('1997-01-01'), xmax=as.Date('2005-01-01'), ymin=-0.1, ymax=-0.3, alpha=0.1,
fill='#f9d62e') +
geom_rect(xmin=as.Date('1999-01-01'), xmax=as.Date('2005-01-01'), ymin=-0.1, ymax=-0.3, alpha=0.1,
fill='#f9d62e') +
geom_rect(xmin=as.Date('2001-01-01'), xmax=as.Date('2005-01-01'), ymin=-0.1, ymax=-0.3, alpha=0.1,
fill='#f9d62e') +
geom_rect(xmin=as.Date('2003-01-01'), xmax=as.Date('2005-01-01'), ymin=-0.1, ymax=-0.3, alpha=0.1,
fill='#f9d62e') +
geom_point(data=NSAID_data, aes(x=date, y=-.2),
shape=18, color='#f9d62e', alpha=.6, size=2)+
#anti-TNF
geom_hline(linetype='dotted', yintercept=-0.5, color = "grey", size=0.3) +
geom_rect(xmin=as.Date('2005-01-01'), xmax=as.Date('2019-07-10'), ymin=-0.4, ymax=-0.6, alpha=0.25, fill='#ff4e50') +
geom_point(data=humira_data, aes(x=date, y=-.5), shape=15, color='#ff4e50', alpha=0.5, size=2) +
#BCD-180
geom_hline(linetype='dotted', yintercept=-.8, color = "grey", size=0.3) +
geom_point(data=antibody_data, aes(x=date, y=-.8),
shape=17, color='olivedrab3', alpha=1, size=2)+
geom_text(data=treatment_data, aes(x=as.Date('1993-01-01'), y=position,
label=medicine), size=3, color='black',
hjust=0,vjust=0.4)+
ylim(-3,3)
timeline_plot
setClass('TCRgrapher',
slots = c(
clonoset  = 'data.table',
metadata = 'data.table'
),
prototype = c(
clonoset = data.table('Read.count' = numeric(), 'cdr3aa' = character(),
'cdr3nt' = character(), 'bestVGene' = character(),
'bestJGene' = character()),
metadata = data.table(sample = 'sample_1')
)
)
library(data.table)
setClass('TCRgrapher',
slots = c(
clonoset  = 'data.table',
metadata = 'data.table'
),
prototype = c(
clonoset = data.table('Read.count' = numeric(), 'cdr3aa' = character(),
'cdr3nt' = character(), 'bestVGene' = character(),
'bestJGene' = character()),
metadata = data.table(sample = 'sample_1')
)
)
setClass('TCRgrapher',
slots = c(
clonosets  = 'list',
metadata = 'matrix',
result = 'list'
)
)
setClass('TCRgrapher',
slots = c(
clonosets  = 'list',
metadata = 'data.frame',
result = 'list'
)
)
?setClass
install.packages('SummarizedExperiment')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SummarizedExperiment")
library(SummarizedExperiment)
library(data.table)
dt <- data.table()
typeof(dt)

file_path <- testthat::test_path("testdata", "clonosets_vdjtools_format.tsv")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
clonoset(TCRgrObject)[1,'count'] <- -1
expect_error(TCRgrValidity(TCRgrObject), "Counts should be positive integers")
})
?expect_error
test_that("validity method works", {
file_path <- testthat::test_path("testdata", "clonosets_vdjtools_format.tsv")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
clonoset(TCRgrObject)[1,'count'] <- -1
# expect_error(TCRgrValidity(TCRgrObject), "Counts should be positive integers")
})
test_that("validity method works", {
file_path <- testthat::test_path("testdata", "clonosets_vdjtools_format.tsv")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
expect_error(clonoset(TCRgrObject)[1,'count'] <- -1)
# expect_error(TCRgrValidity(TCRgrObject), "Counts should be positive integers")
})
TCRgrValidity <- function(object){
if(!is.data.table(object@clonoset)){
return("Clonoset must be a data.table")
}
if(!is.data.table(object@metadata)){
return("Metadata must be a data.table")
}
if(!all(c('count', 'cdr3nt', 'cdr3aa', 'bestVGene', 'bestJGene') %in% colnames(object@clonoset))){
return("Clonoset must contain the following columns: 'count', 'cdr3nt', 'cdr3aa', 'bestVGene', 'bestJGene', 'sample'")
}
if(!all(c('file', 'sample_id') %in% colnames(object@metadata))){
return("Metadata must contain the following columns: 'file', 'sample_id'")
}
if(anyDuplicated(object@metadata) != 0){
return("Metadata must contain unique rows")
}
if(!all(unique(object@clonoset$sample) %in% object@metadata$sample_id)){
return("'sample' clonoset column and 'sample_id' metadata column must have the same values")
}
counts <- object@clonoset$count
if(!all(is.numeric(counts), counts > 0, counts %% 1 == 0)){
return("Counts should be positive integers")
}
if(!is.character(object@clonoset$cdr3nt)){
return("cdr3nt column must contain character values")
}
if(!is.character(object@clonoset$cdr3aa)){
return("cdr3aa column must contain character values")
}
if(!is.character(object@clonoset$bestVGene)){
return("bestVGene column must contain character values")
}
if(!is.character(object@clonoset$bestJGene)){
return("bestJGene column must contain character values")
}
return(TRUE)
}
setValidity("TCRgrapher", TCRgrValidity)
setClass('TCRgrEdgeR',
contains = 'TCRgrapher',
slots = c(
count_table_by_clones = 'data.table',
count_table_by_clusters = 'data.table',
components_info = 'data.table',
edgeR_result = 'data.table'
))
use_test("TCRgrEdgeRObject")
library(testthat)
use_test("TCRgrEdgeRObject")
usethis::use_test("TCRgrEdgeRObject")
?
callNextMethod
?setClass
data.table()
is.null(data.table())
is.nA(data.table())
is.na(data.table())
is.null(data.table())
nrow(data.table())
create_count_table <- function(TCRgrObject, v_gene = TRUE){
callNextMethod(TCRgrObject, ...)
# count_table <- data.table(cdr3aa='0', bestVGene='0')
# metadata <- metadata(TCRgrObject)
# for(i in 1:nrow(metadata)){
#   sample_id <- metadata$sample_id[i]
#   sample <- clonoset(TCRgrObject)[sample == sample_id]
#   if(!v_gene){
#     sample$bestVGene <- ''
#   }
#   sample <- sample[, .(count = sum(count)), by = .(cdr3aa, bestVGene)]
#   setnames(sample, "count", sample_id)
#   count_table <- merge.data.table(count_table, sample,
#                                   by=c('cdr3aa', 'bestVGene'), all=TRUE)
# }
# count_table <- count_table[cdr3aa != '0']
# count_table[is.na(count_table), ] <- 0
# count_table <- as.data.frame(count_table)
# if(v_gene){
#   rownames(count_table) <- paste(count_table$cdr3aa, count_table$bestVGene)
# } else {
#   rownames(count_table) <- count_table$cdr3aa
# }
# count_table <- count_table[,-(1:2)]
# count_table
}
file_path <- testthat::test_path("testdata", "clonosets_vdjtools_format.tsv")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
create_count_table(TCRgrObject)
setClass('TCRgrEdgeR_by_counts',
contains = 'TCRgrapher',
slots = c(
count_table_by_clones = 'data.table',
edgeR_result_by_clones = 'data.table',
))
setClass('TCRgrEdgeR_by_clusters',
contains = 'TCRgrapher',
slots = c(
count_table_by_clusters = 'data.table',
components_info = 'data.table',
edgeR_result_by_clusters = 'data.table'
))
create_count_table <- function(v_gene = TRUE, ...){
TCRgrapher(...)
# count_table <- data.table(cdr3aa='0', bestVGene='0')
# metadata <- metadata(TCRgrObject)
# for(i in 1:nrow(metadata)){
#   sample_id <- metadata$sample_id[i]
#   sample <- clonoset(TCRgrObject)[sample == sample_id]
#   if(!v_gene){
#     sample$bestVGene <- ''
#   }
#   sample <- sample[, .(count = sum(count)), by = .(cdr3aa, bestVGene)]
#   setnames(sample, "count", sample_id)
#   count_table <- merge.data.table(count_table, sample,
#                                   by=c('cdr3aa', 'bestVGene'), all=TRUE)
# }
# count_table <- count_table[cdr3aa != '0']
# count_table[is.na(count_table), ] <- 0
# count_table <- as.data.frame(count_table)
# if(v_gene){
#   rownames(count_table) <- paste(count_table$cdr3aa, count_table$bestVGene)
# } else {
#   rownames(count_table) <- count_table$cdr3aa
# }
# count_table <- count_table[,-(1:2)]
# count_table
}
create_count_table(file_path, 1, 3, 4, 5, 7)
file_path <- testthat::test_path("testdata", "clonosets_vdjtools_format.tsv")
create_count_table(file_path, 1, 3, 4, 5, 7)
file_path
create_count_table <- function(..., v_gene = TRUE){
TCRgrapher(...)
# count_table <- data.table(cdr3aa='0', bestVGene='0')
# metadata <- metadata(TCRgrObject)
# for(i in 1:nrow(metadata)){
#   sample_id <- metadata$sample_id[i]
#   sample <- clonoset(TCRgrObject)[sample == sample_id]
#   if(!v_gene){
#     sample$bestVGene <- ''
#   }
#   sample <- sample[, .(count = sum(count)), by = .(cdr3aa, bestVGene)]
#   setnames(sample, "count", sample_id)
#   count_table <- merge.data.table(count_table, sample,
#                                   by=c('cdr3aa', 'bestVGene'), all=TRUE)
# }
# count_table <- count_table[cdr3aa != '0']
# count_table[is.na(count_table), ] <- 0
# count_table <- as.data.frame(count_table)
# if(v_gene){
#   rownames(count_table) <- paste(count_table$cdr3aa, count_table$bestVGene)
# } else {
#   rownames(count_table) <- count_table$cdr3aa
# }
# count_table <- count_table[,-(1:2)]
# count_table
}
create_count_table(file_path, 1, 3, 4, 5, 7)
create_count_table <- function(..., TCRgrapherObject = NA, v_gene = TRUE){
if(is.na(TCRgrapherObject)){
TCRgrapher(...)
} else {
TCRgrapherObject
}
# count_table <- data.table(cdr3aa='0', bestVGene='0')
# metadata <- metadata(TCRgrObject)
# for(i in 1:nrow(metadata)){
#   sample_id <- metadata$sample_id[i]
#   sample <- clonoset(TCRgrObject)[sample == sample_id]
#   if(!v_gene){
#     sample$bestVGene <- ''
#   }
#   sample <- sample[, .(count = sum(count)), by = .(cdr3aa, bestVGene)]
#   setnames(sample, "count", sample_id)
#   count_table <- merge.data.table(count_table, sample,
#                                   by=c('cdr3aa', 'bestVGene'), all=TRUE)
# }
# count_table <- count_table[cdr3aa != '0']
# count_table[is.na(count_table), ] <- 0
# count_table <- as.data.frame(count_table)
# if(v_gene){
#   rownames(count_table) <- paste(count_table$cdr3aa, count_table$bestVGene)
# } else {
#   rownames(count_table) <- count_table$cdr3aa
# }
# count_table <- count_table[,-(1:2)]
# count_table
}
create_count_table(file_path, 1, 3, 4, 5, 7)
?SummarizedExperiment
library(SummarizedExperiment)
?SummarizedExperiment
document()
library(devtools)
document()
load_all()
?TCRgrapher
document()
document()
document()
?TCRgrapher
document()
?TCRgrapher
?TCRgrapher
document()
?TCRgrapher
document()
?TCRgrapher
document()
?TCRgrapher
document()
?TCRgrapher
document()
?TCRgrapher
document()
?TCRgrapher
document()
?TCRgrapher
document()
?TCRgrapher
?metadata
?clonoset
setClass('TCRgrEdgeRCounts',
contains = 'TCRgrapher',
slots = c(
count_table_by_clones = 'data.table',
edgeR_result_by_clones = 'data.table',
))
setClass('TCRgrEdgeRCounts',
contains = 'TCRgrapher',
slots = c(
count_table_by_clones = 'data.table',
edgeR_result_by_clones = 'data.table'
))
?subset
document()
document()
#' Subseting for TCRgrapher objects
#'
#' The function takes subset from both clonotype table and metadata. Samples that
#' to keep should be specified.
#'
#' @param object TCRgrapher object
#' @param subset Vector with sample ids that should be kept
#'
#' @export
setMethod("subset", "TCRgrapher", function(object, subset) {
object@metadata <- object@metadata[sample_id %in% subset]
object@clonoset <- object@clonoset[sample_id %in% subset]
object
})
setMethod("subset", "TCRgrapher", function(object, subset) {
object@metadata <- object@metadata[sample_id %in% subset]
object@clonoset <- object@clonoset[sample_id %in% subset]
object
})
setMethod("subsetxxx", "TCRgrapher", function(object, subset) {
object@metadata <- object@metadata[sample_id %in% subset]
object@clonoset <- object@clonoset[sample_id %in% subset]
object
})
setGeneric("subset", function(x) standardGeneric("subset"))
setMethod("subset", "TCRgrapher", function(object, subset) {
object@metadata <- object@metadata[sample_id %in% subset]
object@clonoset <- object@clonoset[sample_id %in% subset]
object
})
setGeneric("subset", function(x, subset) standardGeneric("subset"))
#' @export
setMethod("subset", "TCRgrapher", function(object, subset) {
object@metadata <- object@metadata[sample_id %in% subset]
object@clonoset <- object@clonoset[sample_id %in% subset]
object
})
setMethod("subset", "TCRgrapher", function(x, subset) {
object@metadata <- object@metadata[sample_id %in% subset]
object@clonoset <- object@clonoset[sample_id %in% subset]
object
})
document()
document()
document()
document()
document()
document()
?
a
load_all()
?subset
test_that("subsetting method works", {
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
metadata_path <- testthat::test_path("testdata/metadata.tsv")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7, metadata_path, 1, 2)
TCRgrObject <- subset(TCRgrObject, c('Sample_18', 'Sample_19'))
expect_equal(length(unique(TCRgrObject@clonoset$sample)), 2)
expect_equal(nrow(TCRgrObject@metadata), 2)
})
Sys.getenv()
Sys.getenv('PATH')
file_path <- testthat::test_path("testdata", "clonosets_vdjtools_format.tsv")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
attr(TCRgrObject)
?attr
attr(TCRgrObject, 'class')
"TCRgrapher" %in% attr(TCRgrObject, 'class')
TCRgrObject
TCRgrObject@new <- 1
setClass('TCRgrapherCounts',
contains = 'TCRgrapher',
slots = c(
count_table = 'data.frame',
feature_info = 'data.table'
))
new('TCRgrapherCounts', clonoset = TCRgrObject@clonoset,
metadata = TCRgrObject@metadata, count_table = data.frame(),
feature_info = data.table())
s1 <- data.table(count = c(10, 5, 1), cdr3nt = c('NT1', 'NT2', 'NT3'),
cdr3aa = c('AA1', 'AA2', 'AA3'), bestVGene = c('V1', 'V2', 'V3'),
bestJGene = c('J1', 'J2', 'J3'), sample_id = c('s1', 's1', 's1'))
s2 <- data.table(count = c(10, 5, 1), cdr3nt = c('NT1', 'NT2', 'NT3'),
cdr3aa = c('AA1', 'AA2', 'AA3'), bestVGene = c('V1', 'V2', 'V3'),
bestJGene = c('J1', 'J2', 'J3'), sample_id = c('s2', 's2', 's2'))
s3 <- data.table(count = c(10, 5, 1), cdr3nt = c('NT1', 'NT2', 'NT3'),
cdr3aa = c('AA1', 'AA2', 'AA3'), bestVGene = c('V4', 'V5', 'V6'),
bestJGene = c('J1', 'J2', 'J3'), sample_id = c('s3', 's3', 's3'))
clonoset = rbindlist(list(s1, s2, s3)
)
View(clonoset)
TCRgrObject <- new('TCRgrapher',
metadata  = data.table(file = c('file1.txt', 'file2.txt', 'file3.txt'),
sample_id = c('s1', 's2', 's3')),
clonoset = rbindlist(list(s1, s2, s3))
)
View(TCRgrObject)
count_table <- list()
feature_info <- list()
metadata <- TCRgrObject@metadata
clonoset <- TCRgrObject@clonoset
v_gene = TRUE
for(sample_t in metadata$sample_id){
sample <- clonoset[sample_id == sample_t]
if(!v_gene){
sample <- sample[, .(count = sum(count)), by = .(cdr3aa)]
} else {
sample <- sample[, .(count = sum(count)), by = .(cdr3aa, bestVGene)]
}
setnames(sample, "count", sample_id)
count_table <- append(count_table, sample)
}
?setnames
for(sample_t in metadata$sample_id){
sample <- clonoset[sample_id == sample_t]
if(!v_gene){
sample <- sample[, .(count = sum(count)), by = .(cdr3aa)]
} else {
sample <- sample[, .(count = sum(count)), by = .(cdr3aa, bestVGene)]
}
setnames(sample, 'count', sample_t)
count_table <- append(count_table, sample)
}
count_table
sample
s1 <- data.table(count = c(10, 5, 1), cdr3nt = c('NT1', 'NT2', 'NT3'),
cdr3aa = c('AA1', 'AA2', 'AA3'), bestVGene = c('V1', 'V2', 'V3'),
bestJGene = c('J1', 'J2', 'J3'), sample_id = c('s1', 's1', 's1'))
s2 <- data.table(count = c(10, 5, 1), cdr3nt = c('NT1', 'NT2', 'NT3'),
cdr3aa = c('AA1', 'AA2', 'AA3'), bestVGene = c('V1', 'V2', 'V3'),
bestJGene = c('J1', 'J2', 'J3'), sample_id = c('s2', 's2', 's2'))
s3 <- data.table(count = c(10, 8, 5, 1), cdr3nt = c('NT1', 'NT4', 'NT2', 'NT3'),
cdr3aa = c('AA1', 'AA1', 'AA2', 'AA3'), bestVGene = c('V4', 'V4', 'V5', 'V6'),
bestJGene = c('J1', 'J4', 'J2', 'J3'), sample_id = c('s3', 's3', 's3', 's3'))
TCRgrObject <- new('TCRgrapher',
metadata  = data.table(file = c('file1.txt', 'file2.txt', 'file3.txt'),
sample_id = c('s1', 's2', 's3')),
clonoset = rbindlist(list(s1, s2, s3))
)
ount_table <- list()
feature_info <- list()
metadata <- TCRgrObject@metadata
clonoset <- TCRgrObject@clonoset
v_gene = TRUE
for(sample_t in metadata$sample_id){
sample <- clonoset[sample_id == sample_t]
if(!v_gene){
sample <- sample[, .(count = sum(count)), by = .(cdr3aa)]
} else {
sample <- sample[, .(count = sum(count)), by = .(cdr3aa, bestVGene)]
}
setnames(sample, 'count', sample_t)
count_table <- append(count_table, sample)
}
count_table <- list()
feature_info <- list()
metadata <- TCRgrObject@metadata
clonoset <- TCRgrObject@clonoset
v_gene = TRUE
for(sample_t in metadata$sample_id){
sample <- clonoset[sample_id == sample_t]
if(!v_gene){
sample <- sample[, .(count = sum(count)), by = .(cdr3aa)]
} else {
sample <- sample[, .(count = sum(count)), by = .(cdr3aa, bestVGene)]
}
setnames(sample, 'count', sample_t)
count_table <- append(count_table, sample)
}
sample
count_table
count_table[1]
count_table[2]
sample
attr(sample, 'class')
count_table <- list()
feature_info <- list()
metadata <- TCRgrObject@metadata
clonoset <- TCRgrObject@clonoset
v_gene = TRUE
for(sample_t in metadata$sample_id){
sample <- clonoset[sample_id == sample_t]
if(!v_gene){
sample <- sample[, .(count = sum(count)), by = .(cdr3aa)]
} else {
sample <- sample[, .(count = sum(count)), by = .(cdr3aa, bestVGene)]
}
setnames(sample, 'count', sample_t)
count_table <- append(count_table, list(sample))
}
})
count_table <- list()
feature_info <- list()
metadata <- TCRgrObject@metadata
clonoset <- TCRgrObject@clonoset
v_gene = TRUE
for(sample_t in metadata$sample_id){
sample <- clonoset[sample_id == sample_t]
if(!v_gene){
sample <- sample[, .(count = sum(count)), by = .(cdr3aa)]
} else {
sample <- sample[, .(count = sum(count)), by = .(cdr3aa, bestVGene)]
}
setnames(sample, 'count', sample_t)
count_table <- append(count_table, list(sample))
}
count_table
count_table <- rbindlist(count_table)
View(count_table)
cbindlist
?merge.data.table
cbindlist
?Reduce
count_table
s1 <- data.table(count = c(10, 5, 1), cdr3nt = c('NT1', 'NT2', 'NT3'),
cdr3aa = c('AA1', 'AA2', 'AA3'), bestVGene = c('V1', 'V2', 'V3'),
bestJGene = c('J1', 'J2', 'J3'), sample_id = c('s1', 's1', 's1'))
s2 <- data.table(count = c(10, 5, 1), cdr3nt = c('NT1', 'NT2', 'NT3'),
cdr3aa = c('AA1', 'AA2', 'AA3'), bestVGene = c('V1', 'V2', 'V3'),
bestJGene = c('J1', 'J2', 'J3'), sample_id = c('s2', 's2', 's2'))
s3 <- data.table(count = c(10, 8, 5, 1), cdr3nt = c('NT1', 'NT4', 'NT2', 'NT3'),
cdr3aa = c('AA1', 'AA1', 'AA2', 'AA3'), bestVGene = c('V4', 'V4', 'V5', 'V6'),
bestJGene = c('J1', 'J4', 'J2', 'J3'), sample_id = c('s3', 's3', 's3', 's3'))
TCRgrObject <- new('TCRgrapher',
metadata  = data.table(file = c('file1.txt', 'file2.txt', 'file3.txt'),
sample_id = c('s1', 's2', 's3')),
clonoset = rbindlist(list(s1, s2, s3))
)
count_table <- list()
feature_info <- list()
metadata <- TCRgrObject@metadata
clonoset <- TCRgrObject@clonoset
v_gene = TRUE
for(sample_t in metadata$sample_id){
sample <- clonoset[sample_id == sample_t]
if(!v_gene){
sample <- sample[, .(count = sum(count)), by = .(cdr3aa)]
} else {
sample <- sample[, .(count = sum(count)), by = .(cdr3aa, bestVGene)]
}
setnames(sample, 'count', sample_t)
count_table <- append(count_table, list(sample))
}
count_table
Reduce(count_table, function(x, y) merge.data.table(x, y, by=c('cdr3aa', 'bestVGene'), all = TRUE))
Reduce(count_table, merge.data.table)
Reduce(function(x, y) merge.data.table(x, y, by=c('cdr3aa', 'bestVGene'), all = TRUE),
count_table)
?merge.data.table
count_table[is.na(count_table), ] <- 0
count_table <- Reduce(function(x, y) merge.data.table(x, y, by=c('cdr3aa', 'bestVGene'), all = TRUE),
count_table)
count_table
count_table[is.na(count_table), ] <- 0
count_table
library(devtools)
?install_github

?glmQLFTest
?topTags
document()
document()
document()
rlang::last_error()
rlang::last_trace()
rlang::last_trace()
document()
document()
document()
document()
document()
document()
load_all()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
document()
devtools::check()
document()
load_all()
devtools::check()
?lcomp
document()
document()
load_all()
devtools::check()
g <- FALSE
g == FALSE
g <- list()
g != FALSE
typeof(list)
typeof(g)
attr(g, 'class')
g
a <- TRUE
?is.logical
s1 <- data.table(count = c(10, 5, 1), cdr3nt = c('NT1', 'NT2', 'NT3'),
cdr3aa = c('AA1', 'AA2', 'AA3'), bestVGene = c('V1', 'V2', 'V3'),
bestJGene = c('J1', 'J2', 'J3'), sample_id = c('s1', 's1', 's1'))
install.packages('data.table')
library(data.table)
s1 <- data.table(count = c(10, 5, 1), cdr3nt = c('NT1', 'NT2', 'NT3'),
cdr3aa = c('AA1', 'AA2', 'AA3'), bestVGene = c('V1', 'V2', 'V3'),
bestJGene = c('J1', 'J2', 'J3'), sample_id = c('s1', 's1', 's1'))
s1
grouping <- list('bestVGene')
s1[, .(count = sum(count)), by = grouping]
s1[, .(count = sum(count)), by = .(bestVGene)]
grouping <- list(s1[''])
v_gene = TRUE
j_gene = FALSE
paste(v_gene, j_gene)
v_gene
as.numeric(v_gene)
?append
paste(c('cdr3aa', 'bestVGene', 'bestJGene'))
s1
paste(s1)
paste(s1[.('cdr3aa', 'bestVGene', 'bestJGene')])
s1[.('cdr3aa', 'bestVGene', 'bestJGene')]
s1[c('cdr3aa', 'bestVGene', 'bestJGene')]
s1[c('cdr3aa', 'bestVGene', 'bestJGene'),]
s1[,c('cdr3aa', 'bestVGene', 'bestJGene')]
paste(s1[,c('cdr3aa', 'bestVGene', 'bestJGene')])
grouping <- c('cdr3aa', 'bestVGene', 'bestJGene')
?paste
paste(s1$count, s1$cdr3nt)
Reduce(s1, paste)
?Reduce
Reduce(paste, s1)
Reduce(paste, s1[,c('cdr3aa', 'bestVGene', 'bestJGene')])
?dcast
s1
s2
s2 <- data.table(count = c(10, 5, 1), cdr3nt = c('NT1', 'NT2', 'NT3'),
cdr3aa = c('AA1', 'AA2', 'AA3'), bestVGene = c('V1', 'V2', 'V3'),
bestJGene = c('J1', 'J2', 'J3'), sample_id = c('s2', 's2', 's2'))
s3 <- data.table(count = c(10, 8, 5, 1), cdr3nt = c('NT1', 'NT4', 'NT2', 'NT3'),
cdr3aa = c('AA1', 'AA1', 'AA2', 'AA3'), bestVGene = c('V4', 'V4', 'V5', 'V6'),
bestJGene = c('J1', 'J4', 'J2', 'J3'), sample_id = c('s3', 's3', 's3', 's3'))
clonoset = rbindlist(list(s1, s2, s3)
)
clonoset
dcast(clonoset, count ~ sample_id)
dcast(clonoset, count ~ sample_id, fun.aggregate = sum)
sum
dcast(clonoset, count ~ sample_id, fun.aggregate = sum, value.var = 'sum')
dcast(clonoset, count ~ sample_id, fun.aggregate = sum, value.var = 'count')
dcast(clonoset, count ~ sample_id, fun.aggregate = sum, value.var = 'cdr3aa')
clonoset
dcast(clonoset, count ~ sample_id, fun.aggregate = sum, value.var = 'cdr3aa')
dcast(clonoset, count ~ sample_id, value.var = 'cdr3aa')
dcast(clonoset, cdr3aa ~ sample_id, value.var = 'count')
dcast(clonoset, cdr3aa ~ sample_id, value.var = 'count', fun.aggregate = sum)
clonoset
dcast(clonoset, cdr3aa + bestVGene ~ sample_id, value.var = 'count', fun.aggregate = sum)
grouping
as.formula(paste(grouping), sep = '+')
as.formula(paste(grouping), sep = '+'))
as.formula(paste(grouping, sep = '+'))
paste(grouping, sep = '+')
paste(grouping, sep = '+')
?paste
paste(grouping, collapse = '+')
paste(grouping, collapse = ' + ')
paste0(paste(grouping, collapse = ' + '), ' ~ sample_id)'
)
paste0(paste(grouping, collapse = ' + '), ' ~ sample_id')
as.formula(paste0(paste(grouping, collapse = ' + '), ' ~ sample_id'))
1:3
1:3[TRUE, FALSE, TRUE]
grouping
grouping[TRUE, TRUE, FALSE]
grouping[c(TRUE, TRUE, FALSE)]
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
document()
library(devtools)
librar(devtools)
install.packages('devtools')
librar(devtools)
library(devtools)
document()
document()
load_all()
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
TCRgrCounts <- TCRgrapherCounts(TCRgrObject)
load_all()
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
TCRgrCounts <- TCRgrapherCounts(TCRgrObject)
grouping <- c('cdr3aa', 'bestVGene', 'bestJGene')[c(TRUE, v_gene, j_gene)]
clonoset <- TCRgrObject@clonoset
clonoset
clonoset[,grouping]
grouping
clonoset[,list(grouping)]
?data.table
clonoset[,grouping, with=FALSE]
load_all()
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
TCRgrCounts <- TCRgrapherCounts(TCRgrObject)
TCRgrCounts
TCRgrCounts@count_table
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
TCRgrCounts <- TCRgrapherCounts(TCRgrObject, j_gene = FALSE)
TCRgrCounts@count_table
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
TCRgrCounts <- TCRgrapherCounts(TCRgrObject, j_gene = TRUE)
TCRgrCounts@count_table
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
TCRgrCounts <- TCRgrapherCounts(TCRgrObject, v_gene = FALSE)
TCRgrCounts@count_table
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
TCRgrCounts <- TCRgrapherCounts(TCRgrObject, v_gene = FALSE)
#' @import methods
#' @importFrom data.table fread
#' @importFrom data.table rbindlist
#' @importFrom data.table :=
#' TCRgrapherCounts object
#'
#' Function takes a TCRgrapher object as an input and creates a count table
#' where each row corresponds to an unique amino acid sequence and each column
#' corresponds to the sample.
#'
#' @param TCRgrObject TCRgrapher object. It can be constructed by calling the
#' TCRgrapher( ) function.
#' @param v_gene Boolean value. If 'v_gene' is 'TRUE', clonotypes with the same amino
#' acid sequences but different V genes are presented in different rows.
#' Default value is 'TRUE'.
#' @param j_gene Boolean value. If 'j_gene' is 'TRUE', clonotypes with the same amino
#' acid sequences but different J genes are presented in different rows.
#' Default value is 'FALSE'.
#' @return Function returns TCRgrapherCounts object that contains clonoset and
#' metadata from TCRgrapher object, count table and feature info table
#' @export
TCRgrapherCounts <- function(TCRgrObject, v_gene = TRUE, j_gene = FALSE){
# requirements
if(!("TCRgrapher" %in% attr(TCRgrObject, 'class'))){
stop("The function takes TCRgrapher object as an input. See ?TCRgrapher",
call. = FALSE)
}
if(!is.logical(v_gene)){
stop("'v_gene' must be TRUE or FALSE",
call. = FALSE)
}
if(!is.logical(j_gene)){
stop("'v_gene' must be TRUE or FALSE",
call. = FALSE)
}
metadata <- TCRgrObject@metadata
clonoset <- TCRgrObject@clonoset
grouping <- c('cdr3aa', 'bestVGene', 'bestJGene')[c(TRUE, v_gene, j_gene)]
formula <- as.formula(paste0(paste(grouping, collapse = ' + '), ' ~ sample_id'))
count_table <- dcast(clonoset, formula, value.var = 'count', fun.aggregate = sum)
count_table <- as.data.frame(count_table)
print(colnames(count_table))
rownames(count_table) <- Reduce(paste, count_table[,grouping])
count_table <- count_table[,-(1:length(grouping))]
feature_info <- cbind(clonoset, Reduce(paste, clonoset[,grouping, with=FALSE]))
new('TCRgrapherCounts', clonoset = TCRgrObject@clonoset,
metadata = TCRgrObject@metadata, count_table = count_table,
feature_info = feature_info)
}
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
TCRgrCounts <- TCRgrapherCounts(TCRgrObject, v_gene = FALSE)
TCRgrapherCounts <- function(TCRgrObject, v_gene = TRUE, j_gene = FALSE){
# requirements
if(!("TCRgrapher" %in% attr(TCRgrObject, 'class'))){
stop("The function takes TCRgrapher object as an input. See ?TCRgrapher",
call. = FALSE)
}
if(!is.logical(v_gene)){
stop("'v_gene' must be TRUE or FALSE",
call. = FALSE)
}
if(!is.logical(j_gene)){
stop("'v_gene' must be TRUE or FALSE",
call. = FALSE)
}
metadata <- TCRgrObject@metadata
clonoset <- TCRgrObject@clonoset
grouping <- c('cdr3aa', 'bestVGene', 'bestJGene')[c(TRUE, v_gene, j_gene)]
formula <- as.formula(paste0(paste(grouping, collapse = ' + '), ' ~ sample_id'))
count_table <- dcast(clonoset, formula, value.var = 'count', fun.aggregate = sum)
count_table <- as.data.frame(count_table)
print(Reduce(paste, count_table[,grouping]))
rownames(count_table) <- Reduce(paste, count_table[,grouping])
count_table <- count_table[,-(1:length(grouping))]
feature_info <- cbind(clonoset, Reduce(paste, clonoset[,grouping, with=FALSE]))
new('TCRgrapherCounts', clonoset = TCRgrObject@clonoset,
metadata = TCRgrObject@metadata, count_table = count_table,
feature_info = feature_info)
}
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
TCRgrCounts <- TCRgrapherCounts(TCRgrObject, v_gene = FALSE)
TCRgrapherCounts <- function(TCRgrObject, v_gene = TRUE, j_gene = FALSE){
# requirements
if(!("TCRgrapher" %in% attr(TCRgrObject, 'class'))){
stop("The function takes TCRgrapher object as an input. See ?TCRgrapher",
call. = FALSE)
}
if(!is.logical(v_gene)){
stop("'v_gene' must be TRUE or FALSE",
call. = FALSE)
}
if(!is.logical(j_gene)){
stop("'v_gene' must be TRUE or FALSE",
call. = FALSE)
}
metadata <- TCRgrObject@metadata
clonoset <- TCRgrObject@clonoset
grouping <- c('cdr3aa', 'bestVGene', 'bestJGene')[c(TRUE, v_gene, j_gene)]
formula <- as.formula(paste0(paste(grouping, collapse = ' + '), ' ~ sample_id'))
count_table <- dcast(clonoset, formula, value.var = 'count', fun.aggregate = sum)
count_table <- as.data.frame(count_table)
print(length(Reduce(paste, count_table[,grouping])))
rownames(count_table) <- Reduce(paste, count_table[,grouping])
count_table <- count_table[,-(1:length(grouping))]
feature_info <- cbind(clonoset, Reduce(paste, clonoset[,grouping, with=FALSE]))
new('TCRgrapherCounts', clonoset = TCRgrObject@clonoset,
metadata = TCRgrObject@metadata, count_table = count_table,
feature_info = feature_info)
}
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
TCRgrCounts <- TCRgrapherCounts(TCRgrObject, v_gene = FALSE)
count_table[,grouping]
TCRgrObject@count_table[,grouping]
TCRgrCounts@count_table[,grouping]
TCRgrCounts@count_table
groupig
grouping
grouping <- c('cdr3aa')
TCRgrCounts@count_table[,grouping]
example <- 1:10
Reduce(if(length(example) == 1) paste else c, example)
Reduce(if(length(example) == 1) paste else c, c(1))
Reduce(if(length(example) =! 1) paste else c, c(1))
Reduce(if(length(example) != 1) paste else c, c(1))
Reduce(if(length(example) != 1) paste else c, example
)
TCRgrapherCounts <- function(TCRgrObject, v_gene = TRUE, j_gene = FALSE){
# requirements
if(!("TCRgrapher" %in% attr(TCRgrObject, 'class'))){
stop("The function takes TCRgrapher object as an input. See ?TCRgrapher",
call. = FALSE)
}
if(!is.logical(v_gene)){
stop("'v_gene' must be TRUE or FALSE",
call. = FALSE)
}
if(!is.logical(j_gene)){
stop("'v_gene' must be TRUE or FALSE",
call. = FALSE)
}
metadata <- TCRgrObject@metadata
clonoset <- TCRgrObject@clonoset
grouping <- c('cdr3aa', 'bestVGene', 'bestJGene')[c(TRUE, v_gene, j_gene)]
formula <- as.formula(paste0(paste(grouping, collapse = ' + '), ' ~ sample_id'))
count_table <- dcast(clonoset, formula, value.var = 'count', fun.aggregate = sum)
count_table <- as.data.frame(count_table)
rownames(count_table) <- Reduce(if(length(grouping) == 1) c else paste,
count_table[,grouping])
count_table <- count_table[,-(1:length(grouping))]
feature_info <- cbind(clonoset, Reduce(if(length(grouping) == 1) c else paste,
clonoset[,grouping, with=FALSE]))
new('TCRgrapherCounts', clonoset = TCRgrObject@clonoset,
metadata = TCRgrObject@metadata, count_table = count_table,
feature_info = feature_info)
}
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
TCRgrCounts <- TCRgrapherCounts(TCRgrObject, v_gene = FALSE)
TCRgrCounts@count_table
TCRgrCounts@feature_info
TCRgrapherCounts <- function(TCRgrObject, v_gene = TRUE, j_gene = FALSE){
# requirements
if(!("TCRgrapher" %in% attr(TCRgrObject, 'class'))){
stop("The function takes TCRgrapher object as an input. See ?TCRgrapher",
call. = FALSE)
}
if(!is.logical(v_gene)){
stop("'v_gene' must be TRUE or FALSE",
call. = FALSE)
}
if(!is.logical(j_gene)){
stop("'v_gene' must be TRUE or FALSE",
call. = FALSE)
}
metadata <- TCRgrObject@metadata
clonoset <- TCRgrObject@clonoset
grouping <- c('cdr3aa', 'bestVGene', 'bestJGene')[c(TRUE, v_gene, j_gene)]
formula <- as.formula(paste0(paste(grouping, collapse = ' + '), ' ~ sample_id'))
count_table <- dcast(clonoset, formula, value.var = 'count', fun.aggregate = sum)
count_table <- as.data.frame(count_table)
rownames(count_table) <- Reduce(if(length(grouping) == 1) c else paste,
count_table[,grouping])
count_table <- count_table[,-(1:length(grouping))]
feature_info <- cbind(clonoset, Reduce(if(length(grouping) == 1) c else paste,
clonoset[,grouping, with=FALSE]))
setnames(feature_info, 'V2', 'feature')
new('TCRgrapherCounts', clonoset = TCRgrObject@clonoset,
metadata = TCRgrObject@metadata, count_table = count_table,
feature_info = feature_info)
}
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
TCRgrCounts <- TCRgrapherCounts(TCRgrObject, v_gene = FALSE)
TCRgrCounts@feature_info
document()
load_all()
TCRgrCounts
clonoset(TCRgrCounts)
metadata(TCRgrCounts)
#' @export
setGeneric("count_table", function(x) standardGeneric("count_table"))
#' @export
setMethod("count_table", "TCRgrapher", function(x) x@count_table)
#' @export
setGeneric("count_table<-", function(x, value) standardGeneric("count_table<-"))
#' @export
setMethod("count_table<-", "TCRgrapher", function(x, value) {
x@count_table <- value
validObject(x)
x
})
#' @export
setGeneric("feature_info", function(x) standardGeneric("feature_info"))
#' @export
setMethod("feature_info", "TCRgrapher", function(x) x@feature_info)
#' @export
setGeneric("feature_info<-", function(x, value) standardGeneric("feature_info<-"))
#' @export
setMethod("feature_info<-", "TCRgrapher", function(x, value) {
x@feature_info <- value
validObject(x)
x
})
count_table(TCRgrCounts)
feature_info(TCRgrCounts)
TCRgrCounts@count_table
attr(TCRgrCounts@count_table, 'class')
attr(TCRgrCounts@count_table, 'class') == 'data.frame'
TCRgrCounts@count_table <- 1
TCRgrCounts@count_table
is.numeric(TCRgrCounts@count_table)
str(TCRgrCounts@count_table)
TCRgrCounts@count_table[,2]
typeof(TCRgrCounts@count_table[,2])
is.numeric(TCRgrCounts@count_table[,2])
apply(is.numeric, 1, TCRgrCounts@count_table)
?apply
apply(TCRgrCounts@count_table, 2, is.numeric)
all(apply(TCRgrCounts@count_table, 2, is.numeric))
apply(object@count_table, 2, function(x) x > 0)
apply(TCRgrCounts@count_table, 2, function(x) x > 0)
TCRgrCounts@count_table
apply(TCRgrCounts@count_table, 2, function(x) x >= 0)
apply(TCRgrCounts@count_table, 2, function(x) sum(x < 0))
apply(TCRgrCounts@count_table, 2, function(x) sum(x < 0) == 0)
all(apply(TCRgrCounts@count_table, 2, function(x) sum(x < 0) == 0))
TCRgrCounts@feature_info
#' @export
TCRgrCountsValidity <- function(object){
if(!all(apply(object@count_table, 2, is.numeric))){
return("All count_table values must be numeric")
}
if(!all(apply(TCRgrCounts@count_table, 2, function(x) sum(x < 0) == 0))){
return("All count_table values must be positive")
}
if(!all(rownames(object@count_table) %in% object@feature_info$feature)){
return("count_table rownames must match feature column from feature_info")
}
if(!all(unique(object@metadata$sample_id) %in% object@feature_info$sample_id)){
return("'sample_id' metadata column and 'sample_id' feature_info column must have the same values")
}
if(!all(unique(object@metadata$sample_id) %in% colnames(object@count_table))){
return("'sample_id' metadata column and count_table column names must have the same values")
}
return(TRUE)
}
#' @export
setMethod("show", "TCRgrapherCounts", function(object) {
cat(is(object)[[1]], "\n\n",
"  metadata: ", nrow(object@metadata), " rows and ",
ncol(object@metadata), " columns\n",
"  clonoset: ", nrow(object@clonoset), " rows and ",
ncol(object@clonoset), " columns\n\n",
"use clonoset(<your_object>) to see clonoset table \n",
"use metadata(<your_object>) to see metadata table \n",
sep = ""
)
})
TCRgrapherCounts
TCRgrCounts
#' @export
setMethod("show", "TCRgrapherCounts", function(object) {
cat("hehe")
})
TCRgrCounts
#' @export
setMethod("show", "TCRgrapherCounts", function(object) {
cat(is(object)[[1]], "\n\n",
"  metadata: ", nrow(object@metadata), " rows and ",
ncol(object@metadata), " columns\n",
"  clonoset: ", nrow(object@clonoset), " rows and ",
ncol(object@clonoset), " columns\n",
"  count_table: ", nrow(object@count_table), " unique features and ",
ncol(object@count_table), " samples\n\n",
"use clonoset(<your_object>) to see clonoset table \n",
"use metadata(<your_object>) to see metadata table \n",
"use count_table(<your_object>) to see count_table \n",
"use feature_info(<your_object>) to see feature_info table \n",
sep = ""
)
?subset
)
?subset
TCRgrapher::subset
?take_subset_from_count_table
document()
document()
?setGeneric
?standardGeneric
document()
document()
?NextMethod
document()
?NextMethod
document()
warnings()
document()
warnings()
document()
load_all()
devtools::check()
install.packages(methods)
install.packages('methods')
install.packages("methods")
devtools::check()
?TCRgrapherCounts
?TCRgrapher
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
?TCRgrapherCounts
?pval_with_abundance
devtools::document()
?pval_with_abundance
?TCRgrapherCounts
library(roxygen2)
grouping <- c('cdr3aa', 'bestVGene', 'bestJGene')
paste(grpuping)
paste(grouping)
paste(grouping, collapse = ' ')
document()
document()
load_all()

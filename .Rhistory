)
?subset
)
?subset
TCRgrapher::subset
?take_subset_from_count_table
document()
document()
?setGeneric
?standardGeneric
document()
document()
?NextMethod
document()
?NextMethod
document()
warnings()
document()
warnings()
document()
load_all()
devtools::check()
install.packages(methods)
install.packages('methods')
install.packages("methods")
devtools::check()
?TCRgrapherCounts
?TCRgrapher
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
?TCRgrapherCounts
?pval_with_abundance
devtools::document()
?pval_with_abundance
?TCRgrapherCounts
library(roxygen2)
grouping <- c('cdr3aa', 'bestVGene', 'bestJGene')
paste(grpuping)
paste(grouping)
paste(grouping, collapse = ' ')
document()
document()
load_all()
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
# Data loading. See ?TCRgrapher
# The first way is reading files from the directory without metadata
library(tcrgrapher)
load_all()
library(devtools)
load_all()
# Data loading. See ?TCRgrapher
# The first way is reading files from the directory without metadata
library(tcrgrapher)
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
load_all()
# Data loading. See ?TCRgrapher
# The first way is reading files from the directory without metadata
library(tcrgrapher)
#library(data.table)
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
library(data.table)
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7)
file_path <- testthat::test_path("testdata/test_dir_with_clonosets", "")
metadata_path <- testthat::test_path("testdata/metadata.tsv")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7, metadata_path, 1, 2)
metadata
metadata(TCRgrObject)
# to see general information about the object
TCRgrObject
# to see metadata
metadata(TCRgrObject)
file_path <- testthat::test_path("testdata/vaccinated_mice", "")
metadata_path <- testthat::test_path("testdata/metadata_vaccination.tsv")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7, metadata_path, 1, 2)
file_path <- testthat::test_path("testdata/vaccinated_mice", "")
metadata_path <- testthat::test_path("testdata/metadata_vaccination.tsv")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7, metadata_path, 1, 2)
# to see general information about the object
TCRgrObject
# to see metadata
metadata(TCRgrObject)
# add columns to metadata
metadata(TCRgrObject)$vaccination <- 'before'
# to see metadata
metadata(TCRgrObject)
metadata(TCRgrObject)[metadata(TCRgrObject)$time > 2, 'vaccination'] <- 'after'
# to see metadata
metadata(TCRgrObject)
# to create a count table
TCRgrObject <- TCRgrapherCounts(TCRgrObject)
load_all()
library(tcrgrapher)
# create a count table
TCRgrObject <- TCRgrapherCounts(TCRgrObject)
# run EdgeR pipeline
edgeR_res <- edgeR_pipeline(TCRgrObject, 'vaccination')
library(edgeR)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
# run EdgeR pipeline
edgeR_res <- edgeR_pipeline(TCRgrObject, 'vaccination')
# see metadata
metadata(TCRgrObject)
load_all()
# run EdgeR pipeline
edgeR_res <- edgeR_pipeline(TCRgrObject, 'vaccination')
use_test('edgeR')
TCRgrObject@count_table
colnames(TCRgrObject@count_table)
metadata(TCRgrObject)$sample_id
load_all()
# run EdgeR pipeline
edgeR_res <- edgeR_pipeline(TCRgrObject, 'vaccination')
library(edgeR)
# run EdgeR pipeline
edgeR_res <- edgeR_pipeline(TCRgrObject, 'vaccination')
edgeR_res
head(edgeR_res)
# To take a subset we should specify samples that we want to take
samples <-  metadata(TCRgrObject)[time <= 3, 'sample_id']
samples
TCRgrObject_3 <- subset(TCRgrObject, samples)
TCRgrObject_3 <- subset(TCRgrObject, unlist(samples))
# check count table columns and metadata sample_id values
colnames(count_table(TCRgrObject_3))
metadata(TCRgrObject_3)$sample_id
edgeR_res_3 <- edgeR_pipeline(TCRgrObject_3, 'vaccination')
head(edgeR_res_3)
library(tcrgrapher)
library(data.table)
library(edgeR)
# Let's find expanded clonotypes after vaccination. There are 8 mice and 5 time
# points: 2 points before vaccination and 3 after vaccination
# Data loading. See ?TCRgrapher
# One of the ways to read the data
file_path <- testthat::test_path("testdata/vaccinated_mice", "")
metadata_path <- testthat::test_path("testdata/metadata_vaccination.tsv")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7, metadata_path, 1, 2)
# see general information about the object
TCRgrObject
# see metadata
metadata(TCRgrObject)
# add column to metadata
metadata(TCRgrObject)$vaccination <- 'before'
# change some values
metadata(TCRgrObject)[metadata(TCRgrObject)$time > 2, 'vaccination'] <- 'after'
# create a count table
TCRgrCounts <- TCRgrapherCounts(TCRgrObject)
# run EdgeR pipeline
# There are two comparison levels: before and after vaccination
edgeR_res <- edgeR_pipeline(TCRgrCounts, 'vaccination')
head(edgeR_res)
# To take a subset we should specify samples that we want to take
samples <-  metadata(TCRgrCounts)[time <= 3, 'sample_id']
TCRgrCounts_3 <- subset(TCRgrCounts, unlist(samples))
# check count table columns and metadata sample_id values
colnames(count_table(TCRgrCounts_3))
metadata(TCRgrCounts_3)$sample_id
edgeR_res_3 <- edgeR_pipeline(TCRgrCounts_3, 'vaccination')
head(edgeR_res_3)
TCRgrCounts_VJ <- TCRgrapherCounts(TCRgrObject, j_gene = TRUE)
# take the subset again
samples <-  metadata(TCRgrCounts_VJ)[time <= 3, 'sample_id']
TCRgrCounts_VJ_3 <- subset(TCRgrCounts_VJ, unlist(samples))
edgeR_res_VJ_3 <- edgeR_pipeline(TCRgrCounts_VJ_3, 'vaccination')
head(edgeR_res_VJ_3)
head(edgeR_res_3)
head(edgeR_res_VJ_3)
TCRgrCounts_aa <- TCRgrapherCounts(TCRgrObject, v_gene = FALSE, j_gene = FALSE)
# create a count table with aggregation by ony amino acid seuence
TCRgrCounts_aa <- TCRgrapherCounts(TCRgrObject, v_gene = FALSE, j_gene = FALSE)
TCRgrObject
# create a count table with aggregation by ony amino acid seuence
TCRgrCounts_aa <- TCRgrapherCounts(TCRgrObject, v_gene = FALSE, j_gene = FALSE)
# create a count table with aggregation by V and J segments
TCRgrCounts_VJ <- TCRgrapherCounts(TCRgrObject, j_gene = TRUE)
grouping <- c('cdr3aa', 'bestVGene', 'bestJGene')[c(TRUE, v_gene, j_gene)]
formula <- as.formula(paste0(paste(grouping, collapse = ' + '), ' ~ sample_id'))
v_gene = FALSE
j_gene = FALSE
grouping <- c('cdr3aa', 'bestVGene', 'bestJGene')[c(TRUE, v_gene, j_gene)]
formula <- as.formula(paste0(paste(grouping, collapse = ' + '), ' ~ sample_id'))
formula
clonoset <- TCRgrObject@clonoset
count_table <- dcast(clonoset, formula, value.var = 'count', fun.aggregate = sum)
count_table <- as.data.frame(count_table)
rownames(count_table) <- Reduce(if(length(grouping) == 1) c else paste,
count_table[,grouping])
count_table[,grouping]
Reduce(if(length(grouping) == 1) c else paste,
count_table[,grouping])
if(length(grouping) == 1){
rownames(count_table) <- count_table[,grouping]
} else {
rownames(count_table) <- Reduce(paste, count_table[,grouping])
}
load_all()
# create a count table with aggregation by ony amino acid seuence
TCRgrCounts_aa <- TCRgrapherCounts(TCRgrObject, v_gene = FALSE, j_gene = FALSE)
if(length(grouping) == 1){
rownames(count_table) <- count_table[,grouping]
feature_info <- cbind(clonoset, clonoset[,grouping, with=FALSE])
} else {
rownames(count_table) <- Reduce(paste, count_table[,grouping])
feature_info <- cbind(clonoset, Reduce(paste, clonoset[,grouping, with=FALSE]))
}
feature_info
clonoset
clonoset[,grouping, with=FALSE]
feature_info <- cbind(clonoset, feature = clonoset[,grouping, with=FALSE])
feature_info
feature_info <- cbind(clonoset, feature = Reduce(paste, clonoset[,grouping, with=FALSE]))
feature_info
load_all()
# create a count table with aggregation by ony amino acid seuence
TCRgrCounts_aa <- TCRgrapherCounts(TCRgrObject, v_gene = FALSE, j_gene = FALSE)
library(tcrgrapher)
library(data.table)
library(edgeR)
# Let's find expanded clonotypes after vaccination. There are 8 mice and 5 time
# points: 2 points before vaccination and 3 after vaccination
# Data loading. See ?TCRgrapher
# One of the ways to read the data
file_path <- testthat::test_path("testdata/vaccinated_mice", "")
metadata_path <- testthat::test_path("testdata/metadata_vaccination.tsv")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7, metadata_path, 1, 2)
# see general information about the object
TCRgrObject
# see metadata
metadata(TCRgrObject)
# add column to metadata
metadata(TCRgrObject)$vaccination <- 'before'
# change some values
metadata(TCRgrObject)[metadata(TCRgrObject)$time > 2, 'vaccination'] <- 'after'
# create a count table with aggregation by V segments
TCRgrCounts <- TCRgrapherCounts(TCRgrObject)
# run EdgeR pipeline
# There are two comparison levels: before and after vaccination
edgeR_res <- edgeR_pipeline(TCRgrCounts, 'vaccination')
head(edgeR_res)
# To take a subset we should specify samples that we want to take
samples <-  metadata(TCRgrCounts)[time <= 3, 'sample_id']
TCRgrCounts_3 <- subset(TCRgrCounts, unlist(samples))
# check count table columns and metadata sample_id values
colnames(count_table(TCRgrCounts_3))
metadata(TCRgrCounts_3)$sample_id
# run edgeR pipeline
edgeR_res_3 <- edgeR_pipeline(TCRgrCounts_3, 'vaccination')
head(edgeR_res_3)
# create a count table with aggregation by V and J segments
TCRgrCounts_VJ <- TCRgrapherCounts(TCRgrObject, j_gene = TRUE)
# take the subset again
samples <-  metadata(TCRgrCounts_VJ)[time <= 3, 'sample_id']
TCRgrCounts_VJ_3 <- subset(TCRgrCounts_VJ, unlist(samples))
# run edgeR pipeline
edgeR_res_VJ_3 <- edgeR_pipeline(TCRgrCounts_VJ_3, 'vaccination')
head(edgeR_res_VJ_3)
# create a count table with aggregation by ony amino acid seuence
TCRgrCounts_aa <- TCRgrapherCounts(TCRgrObject, v_gene = FALSE, j_gene = FALSE)
# take the subset again
samples <-  metadata(TCRgrCounts_aa)[time <= 3, 'sample_id']
TCRgrCounts_aa_3 <- subset(TCRgrCounts_aa, unlist(samples))
# run edgeR pipeline
edgeR_res_aa_3 <- edgeR_pipeline(TCRgrCounts_aa_3, 'vaccination')
head(edgeR_res_aa_3)
head(edgeR_res_VJ_3)
View(feature_info)
View(TCRgrCounts_aa)
View(TCRgrCounts_VJ)
cluster_id = FALSE
!cluster_id
document
document()
# create a count table by clusters
TCRgrCounts <- TCRgrapherCounts(TCRgrObject, cluster_id = TRUE)
# create a count table by clusters
TCRgrCounts <- TCRgrapherCounts(TCRgrObject, cluster_id = TRUE)
?stringdistmatrix
stringdistmatrix('aaa', c('aaa', 'ava', 'aa'))
?stringdistmatrix
Sys.setenv('R_MAX_VSIZE'=32000000000)
# create a count table by clusters
TCRgrCounts <- TCRgrapherCounts(TCRgrObject, cluster_id = TRUE)
library(tcrgrapher)
load_all
load_all()
library(devtools)
load_all()
library(tcrgrapher)
library(data.table)
library(edgeR)
# Let's find expanded clonotypes after vaccination. There are 8 mice and 5 time
# points: 2 points before vaccination and 3 after vaccination
# Data loading. See ?TCRgrapher
# One of the ways to read the data
file_path <- testthat::test_path("testdata/vaccinated_mice", "")
metadata_path <- testthat::test_path("testdata/metadata_vaccination.tsv")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7, metadata_path, 1, 2)
# see general information about the object
TCRgrObject
# see metadata
metadata(TCRgrObject)
# add column to metadata
metadata(TCRgrObject)$vaccination <- 'before'
# change some values
metadata(TCRgrObject)[metadata(TCRgrObject)$time > 2, 'vaccination'] <- 'after'
# create a count table with aggregation by V segments
TCRgrCounts <- TCRgrapherCounts(TCRgrObject)
# run EdgeR pipeline
# There are two comparison levels: before and after vaccination
edgeR_res <- edgeR_pipeline(TCRgrCounts, 'vaccination')
head(edgeR_res)
# To take a subset we should specify samples that we want to take
samples <-  metadata(TCRgrCounts)[time <= 3, 'sample_id']
TCRgrCounts_3 <- subset(TCRgrCounts, unlist(samples))
# check count table columns and metadata sample_id values
colnames(count_table(TCRgrCounts_3))
metadata(TCRgrCounts_3)$sample_id
# run edgeR pipeline
edgeR_res_3 <- edgeR_pipeline(TCRgrCounts_3, 'vaccination')
head(edgeR_res_3)
# create a count table with aggregation by V and J segments
TCRgrCounts_VJ <- TCRgrapherCounts(TCRgrObject, j_gene = TRUE)
# take the subset again
samples <-  metadata(TCRgrCounts_VJ)[time <= 3, 'sample_id']
TCRgrCounts_VJ_3 <- subset(TCRgrCounts_VJ, unlist(samples))
# run edgeR pipeline
edgeR_res_VJ_3 <- edgeR_pipeline(TCRgrCounts_VJ_3, 'vaccination')
head(edgeR_res_VJ_3)
# create a count table with aggregation by one amino acid sequence
TCRgrCounts_aa <- TCRgrapherCounts(TCRgrObject, v_gene = FALSE, j_gene = FALSE)
# take the subset again
samples <-  metadata(TCRgrCounts_aa)[time <= 3, 'sample_id']
TCRgrCounts_aa_3 <- subset(TCRgrCounts_aa, unlist(samples))
# run edgeR pipeline
edgeR_res_aa_3 <- edgeR_pipeline(TCRgrCounts_aa_3, 'vaccination')
head(edgeR_res_aa_3)
# create a count table by clusters
TCRgrCounts <- TCRgrapherCounts(TCRgrObject, cluster_id = TRUE)
library(igraph)
TCRgrCounts_clusters <- TCRgrapherCounts(TCRgrObject_3, cluster_id = TRUE)
library(dev)
library(devtools)
load_all
load_all
load_all()
library(tcrgrapher)
library(data.table)
library(edgeR)
file_path <- testthat::test_path("testdata/vaccinated_mice", "")
metadata_path <- testthat::test_path("testdata/metadata_vaccination.tsv")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7, metadata_path, 1, 2)
samples <-  metadata(TCRgrObject)[time <= 1, 'sample_id']
TCRgrObject_3 <- subset(TCRgrObject, unlist(samples))
TCRgrCounts_clusters <- TCRgrapherCounts(TCRgrObject_3, cluster_id = TRUE)
?matrix
matrix(0, 2, 2)
matrix(Inf, 2, 2)
?Inf
is.infinite(Inf)
ex1 <- matrix(Inf, 10, 10)
e
ex1
colnames(ex1, 1:10)
colnames(ex1, paste0(name, 1:10))
colnames(ex1, paste0('name', 1:10))
colnames(ex1) <- paste0('name', 1:10)
ex1
rownames(ex1) <- paste0('name', 1:10)
ex1
ex2 <- matrix(0, 2, 2)
rownames(ex2) <- c('name2', 'name8')
colnames(ex2) <- c('name2', 'name8')
ex2 <- matrix(0, 2, 2)
colnames(ex2) <- c('name2', 'name8')
rownames(ex2) <- c('name2', 'name8')
ex2
adj_matrix <- matrix(Inf, 800000, 800000)
adj_matrix <- matrix(Inf, 80000, 80000)
outer(clonoset$bestVGene, clonoset$bestVGene, FUN = '!=')
?graph_from_adjacency_matrix
?make_graph
# if(v_gene){
#   adj_matrix[outer(clonoset$bestVGene, clonoset$bestVGene, FUN = '!=')] <- 0
# }
# if(j_gene){
#   adj_matrix[outer(clonoset$bestJGene, clonoset$bestJGene, FUN = '!=')] <- 0
# }
# g <- graph_from_adjacency_matrix(
#   adj_matrix,
#   mode = "undirected"
# )
g <- make_empty_graph(directed = FALSE)
g <- add_edges(g, edges = c(1,35, 1,36, 34,37))
g <- add_vertices(g, c(1,35,36,37))
g <- add_edges(g, edges = c(1,35, 1,36, 34,37))
?add_edges
View(g)
View(g)
g <- add_edges(g, edges = c(1,35, 1,36, 34,37))
library(igraph)
# if(v_gene){
#   adj_matrix[outer(clonoset$bestVGene, clonoset$bestVGene, FUN = '!=')] <- 0
# }
# if(j_gene){
#   adj_matrix[outer(clonoset$bestJGene, clonoset$bestJGene, FUN = '!=')] <- 0
# }
# g <- graph_from_adjacency_matrix(
#   adj_matrix,
#   mode = "undirected"
# )
g <- make_empty_graph(directed = FALSE)
g <- add_edges(g, edges = c(1,35, 1,36, 34,37))
g <- add_vertices(g, c(1,35,36,37))
g <- add_edges(g, edges = c(1,35, 1,36, 34,37))
g <- add_edges(g, edges = c(1,35, 35,1))
g <- add_vertices(g, 1,35,36,37)
?add_vertices
# if(v_gene){
#   adj_matrix[outer(clonoset$bestVGene, clonoset$bestVGene, FUN = '!=')] <- 0
# }
# if(j_gene){
#   adj_matrix[outer(clonoset$bestJGene, clonoset$bestJGene, FUN = '!=')] <- 0
# }
# g <- graph_from_adjacency_matrix(
#   adj_matrix,
#   mode = "undirected"
# )
g <- make_empty_graph(directed = FALSE)
g <- add_vertices(g, 1)
g <- add_vertices(g, 35)
# if(v_gene){
#   adj_matrix[outer(clonoset$bestVGene, clonoset$bestVGene, FUN = '!=')] <- 0
# }
# if(j_gene){
#   adj_matrix[outer(clonoset$bestJGene, clonoset$bestJGene, FUN = '!=')] <- 0
# }
# g <- graph_from_adjacency_matrix(
#   adj_matrix,
#   mode = "undirected"
# )
g <- make_empty_graph(directed = FALSE)
g <- add_vertices(g, 10)
g$names <- paste('name', 1:10)
g <- add_edges(g, edges = c(1,6, 1,5, 3,4))
plot(g)
c(0,0,0) + c(1,0,1)
library(data.table)
DT <- data.table(a = 1:4, b = c('s', 's', 'b', 'b'))
DT[b = 's']
DT[b == 's']
DT[c(TRUE, FALSE, TRUE. FALSE)]
DT[c(TRUE, FALSE, TRUE, FALSE)]
DT[c(TRUE, FALSE, TRUE, FALSE) & b == 's']
?stringdist
?sapplt
?sapply
make_TCR_graph <- function(clonoset, v_gene = TRUE, j_gene = FALSE){
if (!requireNamespace("igraph", quietly = TRUE)) {
stop(
"Package \"igraph\" must be installed to use this function.",
call. = FALSE
)
}
# graph from adjacency matrix
# adj_matrix <- stringdistmatrix(clonoset$cdr3aa, clonoset$cdr3aa, method = "hamming")
# adj_matrix <- 1*(adj_matrix <= 1)
# rownames(adj_matrix) <- clonoset$clone_id
# colnames(adj_matrix) <- clonoset$clone_id
# diag(adj_matrix) <- 0
# if(v_gene){
#   adj_matrix[outer(clonoset$bestVGene, clonoset$bestVGene, FUN = '!=')] <- 0
# }
# if(j_gene){
#   adj_matrix[outer(clonoset$bestJGene, clonoset$bestJGene, FUN = '!=')] <- 0
# }
# g <- graph_from_adjacency_matrix(
#   adj_matrix,
#   mode = "undirected"
# )
g <- make_empty_graph(directed = FALSE)
n <- nrow(clonoset)
g <- add_vertices(g, n)
to_check <- rep(TRUE, n)
for(v in 1:n){
if(to_check[v]){
to_check[v] <- FALSE
candidates <- clonoset[to_check & grouping, .(cdr3aa, clone_id)]
neighbors <- stringdistmatrix(candidates$cdr3aa, candidates$cdr3aa, method = "hamming") <= 1
sapply(unlist(candidates[neighbors, .(clone_id)]), function(x) add_edges(g, edges = c(v, x)))
}
}
g
}
library(tcrgrapher)
library(data.table)
library(edgeR)
library(devtools)
load_all()
file_path <- testthat::test_path("testdata/vaccinated_mice", "")
metadata_path <- testthat::test_path("testdata/metadata_vaccination.tsv")
TCRgrObject <- TCRgrapher(file_path, 1, 3, 4, 5, 7, metadata_path, 1, 2)
samples <-  metadata(TCRgrObject)[time <= 1, 'sample_id']
TCRgrObject_3 <- subset(TCRgrObject, unlist(samples))
TCRgrCounts_clusters <- TCRgrapherCounts(TCRgrObject_3, cluster_id = TRUE)
